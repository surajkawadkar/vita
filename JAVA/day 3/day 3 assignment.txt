// 1)	Define 2 classes “First” and “Second” with member variables , 
// member functions and constructors of  your choice. Now define a class “Two” in which define main function .
//In main function create various instances of First and Second  and call their individual member functions.
class first{
    int num;
    void  setNum(int num){
        this.num=num;

    }
    int getNum(){
        return this.num;
    }

}

class second{
    String name ;
    void  setName(String name){
        this.name=name;

    }
    String getName(){
        return this.name;
    }

}

class member_access{
    public static void main(String arg[]){
        first s1= new first();
        second s2= new second();
        s1.setNum(78);
        s2.setName("black");
        System.out.println(s1.getNum()+"and name is "+s2.getName());
    }
}


// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>javac member_access.java

// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>java member_access
// 78and name is black
===================================================================================


// 2)	Create a class with static and non-static member variables.
//  Define static and non-static member functions. Create instance of 
//  this class and call both static and non-static member functions

class A{
    static int num=20;
    int num2=10;
    static void display(){

        System.out.println("static function ");
    }

    void display2(){
        System.out.println("non static function ");
    }
}

class stat_nonstat{
    public static void main(String args[]){
        A s1 =new A(); //create instance of class
        System.out.println(A.num); //called static instance variable using class.variable
        A.display(); //use class name to call static method
        System.out.println(s1.num2); //use referemce to call non static  variable
        s1.display2(); //use ref to call nonstatic method
        
    }
}


// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>javac stat_nonstat.java

// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>java stat_nonstat
// 20
// static function
// 10
// non static function


===================================================================================

/*
3)	Define a class “Check” in which declare member variables using  different
 accessibility modifiers i.e.  <default>, private ,public and protected. 
   Define a function “disp”  which should be public.
     Define a class “CheckDemo” in which you will write “main()” function.
      Create an instance of  the class “Check” and  show how many
  variables can be accessed directly and how many indirectly



*/
class check{
int num1=10; //default
private int num2=20;//private
public int num3=30; //public
protected int num4=40; //protected
public void disp(){
    System.out .println(num1);
    System.out .println(num2);
    System.out .println(num3);
    System.out .println(num4);
}
}






class checkDemo{
    public static void main(String args[]){
        check s1 = new check();
        System.out.println(s1.num1);
        //System.out.println(s1.num2); direct cannot access because or private modifier 
        System.out.println(s1.num3);
        System.out.println(s1.num4);
        System.out.println("disp method");

    s1.disp();
    }
}


// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>javac checkDemo.java

// E:\Courses\VITA\VITA-PROGRAMS\JAVA\day 3>java checkDemo
// 10
// 30
// 40
// disp method
// 10
// 20
// 30
// 40

===================================================================================
4)	Show the example of single level inheritance with constructor invocation.

package inheritance;
class parent{
	parent()
	{
		System.out.println("parent constructor invoked");
	}
	
		int num1=9;
	
	void pmethod() {
		System.out.println("parent class ");
	}
}
class child extends parent{
	child()
	{
		System.out.println("child constructor invoked");
	}
	void cmethod() {
		System.out.println("child class ");
	}
}
public class single {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		child s1 =new child();
		s1.cmethod();
		s1.pmethod();
	}

}
output:

parent constructor invoked
child constructor invoked
child class 
parent class 
=================================================================================

5)	Show the example of multi-level inheritance with constructor invocation.

class grandParent{
	grandParent()
	{
		System.out.println("grandparent constructor invoked");
	}
	
		int num1=9;
	
	void GPmethod() {
		System.out.println("grand parent class ");
	}
}
class parent extends grandParent{
	parent()
	{
		System.out.println("parent constructor invoked");
	}
	
		int num1=9;
	
	void pmethod() {
		System.out.println("parent class ");
	}
}
class child extends parent{
	child()
	{
		System.out.println("child constructor invoked");
	}
	void cmethod() {
		System.out.println("child class ");
	}
}
public class multi {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		child s1 =new child();
		s1.cmethod();
		s1.pmethod();
		s1.GPmethod();
	

	}

}
============================================================================
6)	Show the example of hierarchical inheritance with constructor invocation.
package oops;
class mobile{
	mobile(){
		System.out.println("mobile main class construcctor invoked");
	}
	void mobMethod() {
		System.out.println("\"base class method invoked");
		
	}
}

class samsung extends mobile{
	samsung(){
		System.out.println("samsumg logo");
	}
	void samsungMethod() {
		System.out.println("samsung features");
	}
}

class apple extends mobile{
	apple(){
		System.out.println("apple logo");
	}
	void appleMethod() {
		System.out.println("apple features");
	}
}
public class hierarchy {

	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		apple s1 =new apple();
		samsung s2 = new samsung();
		s1.appleMethod();
		s2.samsungMethod();
	}

}

output:
apple logo
mobile main class constriuctor invoked
samsumg logo
apple features
samsung features
===========================================================================================
7)	Define a parent and a child class . Now explain function overriding with Example.
package oops;
class base{
	void display() { 
		System.out.println("overridden method also known as parent method");
	}
}
class subClass extends base{
	void display() {
		System.out.println("ocerridding method ....child's class method");
	}
}
public class override {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		base s1 = new subClass();
		s1.display();

	}

}

output:
ocerridding method ....child's class method



=================================================================================

8)	Define a parnt class with one fuenction. Define child class with the function having same name as of parent class function, but having different argument.
Create an instance of child class and call the functions. Make sure u have followed the concept of “function overloading “ in inheritance.

package oops;
class parent{
	void display() {
		System.out.println("parent class");
	}
	
}

class child extends parent{
	int num;
	void display(int k) {
		num=k;
		System.out.println(num);
	}
	
}
public class inheritance_overloading {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		child s1 = new child();
		s1.display();
		s1.display(5);
	}

}

output:
parent class
5
===========================================================================
9)	Define a class “Shape” with “draw()” function . Now derive  classes 
like “Circle”, “Polygon”,”Rectangle” etc. from “Shape” and override “draw()” function. 
Define a class “ShapeDemo” in which  write  main()  function. In the main function 
create a reference to Shape class referring to any of the sub class.
 Using this reference, call “draw()” and check the result.
----------------------
package oops;
class shape{
	void draw() {
		System.out.println("shpae class");
		
	}
}

class circle extends shape{
	void draw() {
		System.out.println("shpae circle");
	}
}

class rectangle extends shape{
	void draw() {
		System.out.println("shpae rectangle");
	}
}

class polygon extends shape{
	void draw() {
		System.out.println("shpae polygon");
	}
}
public class shapeDemo {
	
	static void perform(shape ref) {
		ref.draw();
	}
	
	public static void main(String[] args) {
		perform(new circle());
		perform(new rectangle());
		perform(new polygon());

	}
}

output:
shpae circle
shpae rectangle
shpae polygon
